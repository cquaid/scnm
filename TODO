Daemonize.  Spawn new thread when new attach is requested.
Main thread contains list of message queue ids for each process.
frontend sends commands to the message queue for the requested pid.


Command line accessable (for scripting).
Still needs a shell frontend for searching.


Multithread the frontend so set loops can be implemented properly.


Need commands to stop game and to continue game so shell scripts can:
stop. get address value. process. set. continue. without underlying data changing.


number ops:
= <arg,...>
== <arg,...>
! <arg,...>
! <op> <op_args>
!= <arg,...>
< <arg>
<= <arg>
> <arg>
>= <arg>
>< <arg_gt> <arg_lt>
>=< <arg_ge> <arg_lt>
><= <arg_gt> <arg_le>
>=<= <arg_ge> <arg_le>

arg : single number
arg,... : comma seperated list of numbers (num[,num])

byte array ops:
aob <byte_couples>
string <ascii_string>




Graphical Overlay Hooking

Unfortunately to make this easier for the end user there is a complicated process
to perform:

  PTRACE STOP

  pull some block of data out of the code.
  store current ip and register values.

  write byte code for the following:
    mmap(ANONYMOUS rw)
	break point
	mprotect(map_addr, rx)
	break point

  PTRACE CONTINUE

  On first breakpoint:
    copy the content of a swapBuffers hook function into the map.
	copy the original swapBuffers function into the map and patch
	  the hook function with the new address.

  PTRACE CONTINUE

  On second breakpoint:
    unpatch / restore original code.
	restore original register values.
	restore original ip.
	Add swapBuffers patch to point to the new swapBuffers hook that was
	  with the first breakpoint.

  PTRACE CONTINUE




TODO:
  Pretty sure the match code is broken.  It seems that we might need to
  expand to using bits for signed matches as well.  This will grow the
  match_object size by 4 or 8 bytes depending on architecture.

  Should probably also keep a debug count of how much memory was freed
  during a match processing.  And also check the last chunk in the list
  and move it down to the smallest match_list that it can fit into.
  just realloc() to the maximum required space and fixup size.

  Should the match list maintain ordering?  This will slow down significantly
  for large number of matches.



Malloc Injection:

  Stop process.
  Add dlopen call to load an allocation hooking library (free, malloc, realloc).
  Fixup GOT to call into allocation hooking library for each function instead
    of the originals.
  Unpatch dlopen stuff and rewind ip.

  Hook will connect over a new unix domain socket to wintermute daemon.
  Each allocation it will send return address and requested size.
  Wintermute will maintain a list of these chunks.

  Rational:
    On multiple loads of a savefile the same allocations should occure.
	Scanning these allocated chunks for changes after load (example:
	health change to a character), will allow finding of allocations for
	structs or classes used by the game or application.  From these
	addresses we can determine the addresses on the stack that reference
	this and create "frozen" references to these values.  Then with the
	combination of this stack address and member offset, we can just
	patch the dereference and offset instead of looking up a value
	again.

  This will require implementing calls that allow dumping a memory region,
  returning the allocation list, filtering the allocation list by size,
  searching the stack for a reference, dereferencing a pointer on the stack
  and setting a value at an offset from that value.

